#
# .zshrc by chluna
#
# for `root` user, ln -s $ZDOTDIR  to /root
#                        ~/.zshenv
#

# zsh functions
autoload -Uz compinit; compinit
#autoload -Uz promptinit; promptinit

# zsh history
setopt SHARE_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_SAVE_NO_DUPS

# completion for kitty
[[ -f $(which kitty) ]] && kitty + complete setup zsh | source /dev/stdin

# Powerlevel10k theme
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
#if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
#fi
# load theme
[[ -f $ZDOTDIR/powerlevel10k/powerlevel10k.zsh-theme ]] && source $ZDOTDIR/powerlevel10k/powerlevel10k.zsh-theme
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f $ZDOTDIR/.p10k.zsh ]] && source $ZDOTDIR/.p10k.zsh

# git completions
fpath=(/usr/share/git/completions $fpath)

# zsh autosuggestions
[[ -f $ZDOTDIR/zsh-autosuggestions/zsh-autosuggestions.zsh ]] && source $ZDOTDIR/zsh-autosuggestions/zsh-autosuggestions.zsh
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#888888"

# zsh syntax highlighting
[[ -f $ZDOTDIR/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]] && source $ZDOTDIR/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# initialize shell in emacs mode
set -o emacs

# change cursor when switching vi command and insert modes
# https://stackoverflow.com/questions/61776558/zsh-in-vi-mode-how-to-change-color-scheme
function zle-keymap-select() {
    if [[ $KEYMAP = vicmd ]]; then
        print -n '\e[2 q'
    else
        print -n '\e[5 q'
    fi
}
zle -N zle-keymap-select

# fzf key bindings
[[ -f /usr/share/fzf/key-bindings.zsh ]] && source /usr/share/fzf/key-bindings.zsh
[[ -f /usr/share/fzf/completion.zsh ]] && source /usr/share/fzf/completion.zsh

# key bindings
# ctrl + arrow to move by words
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
# make home & end work as it should
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line

# alias
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'
alias free='free -m'				# show sizes in MB
alias cp='cp -i --reflink=always'	# confirm before overwriting something
alias df='df -h'					# human-readable sizes
# custom alias
alias clr='clear'
alias j='journalctl -rb'
[[ -f $(which nnn) ]] && alias f='nnn'
[[ -f $(which kitty) ]] && alias theme='kitty +kitten themes'
[[ -f $(which neofetch) ]] && alias nf='neofetch --colors 4 7 4 4 7 6 --ascii_colors 4 4'
[[ -f $(which btop) ]] && alias top='btop'
[[ -f $(which intel_gpu_top) ]] && alias gtop='sudo intel_gpu_top'
if [[ -f $(which nvim) ]] then
    alias e='nvim'
    alias E='sudoedit'
    alias vi='nvim'
    alias vim='nvim'
    alias vimdiff='nvim -d'
    alias xxd='nvim -b'
fi
# rust alternatives
if [[ -f $(which lsd) ]] then
	alias ls='lsd -AF --group-dirs first'
	alias ll='lsd -aFl --group-dirs first'
fi
if [[ -f $(which fd) ]] then
    alias find='fd'
fi
if [[ -f $(which rg) ]] then
    alias grep='rg'
    alias egrep='rg'
    alias fgrep='rg'
else
    alias grep='grep --color=auto'
    alias egrep='egrep --color=auto'
    alias fgrep='fgrep --color=auto'
fi

# global custom functions
# pacman/paru
pm() {
    if [[ -f $(which paru) ]] then
        pkg=paru
        sudo_pkg=$pkg
        up_pkg=$pkg
    else
        pkg=pacman
        sudo_pkg='sudo '$pkg
        up_pkg=$sudo_pkg' -Syu'
    fi
    case "$1" in
        i|install)	$pkg -Slq | fzf --multi --preview "$pkg -Si {1}" | xargs -ro $sudo_pkg -S;;
        r|remove)	$pkg -Qq | fzf --multi --preview "$pkg -Qi {1}" | xargs -ro $sudo_pkg -Rsn;;
        q|query)	$pkg -Slq | fzf --preview "$pkg -Si {1}";;
        p|purge)	$pkg -Qtdq | $sudo_pkg -Rsn -;;
        m|mirror)	sudo reflector --verbose 		\
        			--save /etc/pacman.d/mirrorlist \
        			--protocol https 				\
                    --country "Australia,Hong Kong,Indonesia,Japan,New Zealand,Philippines,Singapore,South Korea, Taiwan,Thailand,Vietnam" \
        			--sort rate 					\
                    --age 24                        \
                    --score 20;;
        e|export)
        	exp=$DOTFILES/pacman
        	[[ ! -d $exp ]] && mkdir -p $exp
            $pkg -Qqen > $exp/pkgloc.txt
            $pkg -Qqem > $exp/pkgaur.txt
            echo "Exported in $exp";;
        c|clean)	$sudo_pkg -Sc;;
        d|diff)     sudo -E pacdiff;;
        u|update)   checkupdates;;
        up|upgrade)
            log=$(mktemp)
        	script -q $log -c $up_pkg
        	[[ $(grep '.+\.pac(new|orig|save)' $log) ]] && pm diff
        	rm $log
        	$pkg -Qtdq > /dev/null | $sudo_pkg -Rsn -
        	xfce4-panel --plugin-event=genmon-8:refresh:bool:true;;
        *)
        	echo "Usage: pm [command]"
        	echo "Commands: i|install       install packages using fzf"
        	echo "          r|remove        remove packages using fzf"
        	echo "          q|query         query local package using fzf"
        	echo "          p|purge         remove orphaned packages"
        	echo "          m|mirror        update mirrorlist"
        	echo "          e|export        export local and AUR package lists"
        	echo "          c|clean         clean paru cache"
        	echo "          d|diff          find and act on pac[diff|new|save] files"
        	echo "          u|update        check for package updates"
        	echo "          up|upgrade      update and upgrade packages"
    esac
}
# zshrc edit and reload
z() {
	case "$1" in
		e|edit)
            chksum=$(mktemp)
			sha1sum $ZDOTDIR/.zshrc > $chksum
			e $ZDOTDIR/.zshrc
			sha1sum -c $chksum --status
			if [[ $? -ne 0 ]] then
			    rm $chksum
				read -q "choice?Reload changes? [y/n] "
				echo "\n"
				if [[ ${choice:l} = "y" ]] exec zsh
			fi
			rm $chksum;;
		up|upgrade)
			dir=$(pwd)
			cd $ZDOTDIR
			find . -mindepth 1 -maxdepth 1 -type d -print -exec git -C {} pull \;
			cd $pwd;;
		*)
			exec zsh
	esac
}
# zsh emacs and vi mode
zm() {
    case "$1" in
        e|emacs)    set -o emacs;;
        v|vi)       set -o vi;;
        *)          echo "mod [v|vi]"
                    echo "mod [e|emacs]"
    esac
}

# user custom functions
if [[ $UID -ne 0 ]] then
	# custom aliases
    alias dot='cd $DOTFILES'
    alias fck='sudo $(fc -ln -1)'
	alias run='hledger -f $HOME/data/fitness/running/running.journal'
	alias sudo='sudo '
    # build and execute code
	build() {
        code=$1
        file=(${(s/./)code})
        case "$file[2]" in
            c)  gcc $code -o $file[1];;
            rs) rustc $code;;
            *)  echo "Invalid file extension"
        esac
        ./$file[1]
        rm $file[1]
	}
    # hledger
    fin() {
        case "$1" in
            e|j|edit|journal)
                e $HOME/data/finance/ledger/$2.journal;;
            p|price)
                e $HOME/data/finance/ledger/$2.prices;;
            m|main)
                e $HOME/data/finance/ledger/main.journal;;
            *)
                hledger -f $HOME/data/finance/ledger/main.journal "$@"
        esac
    }
	# systemctl
	sc() {
        sc=""
        jc=""
        if [[ $1 == "-u" || $1 == "--user" ]] then
            sc="--user"
            jc="--user-unit"
            shift
        fi
	    case "$1" in
            j|journal)  journalctl $jc $2 -f;;
		    e|edit)     sudo -E systemctl edit $2;;
	        h|help)	    echo "Usage: sc <-u|--user> <j|e|h> [command] [service]";;
			*)          systemctl $sc $1 $2
		esac
	}
    # btrbk
	bk() {
	    config=$HOME/.config/dotfiles/btrbk/btrbk-backup.conf
		case "$1" in
            -l|--list)     sudo btrbk list backups -c $config -v;;
            -d|--dryrun)   sudo btrbk dryrun -c $config -v;;
            -r|--run)      sudo btrbk run -c $config -v;;
            *)
                echo "Usage: bk [command]"
                echo "Commands: l|list      list backups"
                echo "          d|dryrun    perform a dryrun"
                echo "          r|run       run backup"
        esac
	}
    # btrfs progs
    bt() {
        case "$2" in
            loc)  tgt="/";;
            ext)  tgt="/run/media/spike/ssd";;
            *)
        esac
        case "$1" in
            -f|--filesystem)   sudo btrfs fi us $tgt;;
            -b|--balance)   sudo btrfs ba start -v $3 $4 $tgt;;
            -s|--scrub)   sudo btrfs sc start -Bd $tgt;;
            *)
        esac
    }
fi

