#
# .zshrc by chluna
#
# for `root` user, ln -s $ZDOTDIR  to /root
#                        ~/.zshenv
#

# zsh functions
autoload -Uz compinit; compinit
#autoload -Uz promptinit; promptinit

# completion for kitty
[[ -f $(which kitty) ]] && kitty + complete setup zsh | source /dev/stdin

# Powerlevel10k theme
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
#if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
#fi
# load theme
[[ -f $ZDOTDIR/powerlevel10k/powerlevel10k.zsh-theme ]] && source $ZDOTDIR/powerlevel10k/powerlevel10k.zsh-theme
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f $ZDOTDIR/.p10k.zsh ]] && source $ZDOTDIR/.p10k.zsh

# git completions
fpath=(/usr/share/git/completions $fpath)

# zsh autosuggestions
[[ -f $ZDOTDIR/zsh-autosuggestions/zsh-autosuggestions.zsh ]] && source $ZDOTDIR/zsh-autosuggestions/zsh-autosuggestions.zsh
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#888888"

# zsh syntax highlighting
[[ -f $ZDOTDIR/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]] && source $ZDOTDIR/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# key bindings
# ctrl + arrow to move by words
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
# make home & end work as it should
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line

# alias
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias free='free -m'				# show sizes in MB
alias cp='cp -i --reflink=always'	# confirm before overwriting something
alias df='df -h'					# human-readable sizes
# custom aliases
alias d='cd $DOTFILES'
alias f='nnn'
alias j='journalctl -rb'
alias n='neofetch --colors 4 7 4 4 7 6 --ascii_colors 4 4'
# nvim aliases
alias e='nvim'
alias vi='nvim'
alias vim='nvim'
alias vimdiff='nvim -d'
alias xxd='nvim -b'
# rust alternatives
if [[ -f $(which lsd) ]]; then
	alias ls='lsd -AF --group-dirs first'
	alias ll='lsd -aFl --group-dirs first'
	alias lt='lsd -A --tree --group-dirs first --depth'
fi
# global custom functions
pm() {
    case "$1" in
        i|install)	shift; paru -S "$@";;
        s|search)	shift; paru "$@";;
        r|remove)	shift; paru -Rns "$@";;
        p|purge)	pacman -Qtdq | sudo pacman -Rsn -;;
        m|mirror)	sudo reflector --verbose 		\
        			--save /etc/pacman.d/mirrorlist \
        			--protocol https 				\
        			--sort rate 					\
        			--fastest 50 					\
        			--latest 40 					\
        			--score 30 						\
        			--age 24;;
        e|export)
        	exp=$DOTFILES/pacman
        	[[ ! -d $exp ]] && mkdir -p $exp
            pacman -Qqen | awk '{print $1}' > $exp/pkgloc.txt
            pacman -Qqem | awk '{print $1}' > $exp/pkgaur.txt
            echo "Exported in $exp";;
        q|query)	shift; pacman -Qs "$@";;
        c|clean)	paru -Sc;;
        d|diff)     sudo -E pacdiff;;
        u|update)   checkupdates;;
        up|upgrade)
        	log=/tmp/paru.script
        	script -q $log -c paru
        	[[ $(grep -E '.+\.pac(new|orig|save)' $log) ]] && pm diff
        	rm $log
        	pacman -Qtdq > /dev/null && pm purge
        	xfce4-panel --plugin-event=genmon-8:refresh:bool:true;;
        *)
        	echo "Usage: pm [command] [args]"
        	echo "Commands: i|install [package/s]   install packages"
        	echo "          q|query [package]       query local package"
        	echo "          s|search [package]      search for a package using paru"
        	echo "          r|remove [package/s]    remove packages"
        	echo "          p|purge                 remove orphaned packages"
        	echo "          m|mirrorlist            update mirrorlist"
        	echo "          e|export                export local and AUR package lists"
        	echo "          c|clean                 clean paru cache"
        	echo "          d|diff                  find and act on pac[diff|new|save] files"
        	echo "          u|update                check for package updates"
        	echo "          up|upgrade              update and upgrade packages"
    esac
}
zs() {
	case "$1" in
		e|edit)
			chksum=/tmp/zshrc.sha1
			sha1sum $ZDOTDIR/.zshrc > $chksum
			e $ZDOTDIR/.zshrc
			sha1sum -c $chksum --status
			if [[ $? -ne 0 ]] then
				rm $chksum
				read -q "choice?Reload changes? [y/n] "
				echo "\n"
				if [[ ${choice:l} = "y" ]] exec zsh
			fi
			rm $chksum;;
		u|upgrade)
			dir=$(pwd)
			cd $ZDOTDIR
			find . -mindepth 1 -maxdepth 1 -type d -print -exec git -C {} pull \;
			cd $pwd;;
		*)
			zs edit
	esac
}

if [[ $UID -ne 0 ]] then
	# rust
	rust() {
		file=$(echo $1 | cut -d'.' -f1)
		rustc $file.rs && ./$file && rm $file
	}
	# custom aliases
	alias fin='hledger -f $HOME/data/finance/ledger/finance.journal'
	alias run='hledger -f $HOME/data/fitness/running/running.journal'
	alias sudo='sudo '
	alias y='sudo $(fc -ln -1)'
	# custom functions
	sc() {
	    case "$1" in
	        h|help)	echo "Usage: sc <u|user> [command] [service]";;
	        u|user)
	            shift
			    systemctl --user $1 $2;;
            *)
		        case "$1" in
		            edit)       sudo -E systemctl edit $2;;
			        *)			sudo systemctl $1 $2
                esac
		esac
	}
	bk() {
	    config=$HOME/.config/dotfiles/btrbk/btrbk-backup.conf
		case "$1" in
            l|li|list)
                sudo btrbk list backups -c $config -v;;
            n|dryrun)
                sudo btrbk dryrun -c $config -v;;
            r|run)
                sudo btrbk run -c $config -v;;
            *)
                echo "Usage: bk [command]"
                echo "Commands: l|li|list   list backups"
                echo "          n|dryrun    perform a dryrun"
                echo "          r|run       run backup"
        esac
	}
fi
