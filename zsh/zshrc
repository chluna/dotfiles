#
# .zshrc by chluna
#
# for `root` user, ln -s $ZDOTDIR  to /root
#                        ~/.zshenv
#

# zsh functions
autoload -Uz compinit; compinit
#autoload -Uz promptinit; promptinit

# completion for kitty
kitty + complete setup zsh | source /dev/stdin

# Powerlevel10k theme
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
#if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
#fi
# load theme
[[ -f $ZDOTDIR/powerlevel10k/powerlevel10k.zsh-theme ]] && source $ZDOTDIR/powerlevel10k/powerlevel10k.zsh-theme
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f $ZDOTDIR/.p10k.zsh ]] && source $ZDOTDIR/.p10k.zsh

# git completions
fpath=(/usr/share/git/completions $fpath)

# zsh autosuggestions
[[ -f $ZDOTDIR/zsh-autosuggestions/zsh-autosuggestions.zsh ]] && source $ZDOTDIR/zsh-autosuggestions/zsh-autosuggestions.zsh
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#888888"

# zsh syntax highlighting
[[ -f $ZDOTDIR/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]] && source $ZDOTDIR/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# key bindings
# ctrl + arrow to move by words
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
# make home & end work as it should
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line

# alias
# from .bashrc
alias ls='ls -a --color=auto'
alias ll='ls -alh --color=auto'
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias cp='cp -i'                          # confirm before overwriting something
alias df='df -h'                          # human-readable sizes
alias free='free -m'                      # show sizes in MB
# custom aliases
alias c='vscodium'
alias m='sudo dmesg -eHw'
alias e='micro'
alias f='nnn -deEH'
alias s='neofetch --colors 4 7 4 4 7 6 --ascii_colors 4 4'
alias y='sudo $(fc -ln -1)'
# rust alternatives
if [[ -f /usr/bin/exa ]]; then
	alias ls='exa -a'
	alias ll='exa -albg --group-directories-first'
fi

# global custom functions
pm() {
    case "$1" in
        i|install)	shift; paru -S "$@"				;;
        r|remove)	shift; paru -Rsn "$@"			;;
        p|purge)	pacman -Qtdq | pacman -Rsn -	;;
        m|mirror)	sudo reflector --verbose 		\
        			--save /etc/pacman.d/mirrorlist \
        			--protocol https 				\
        			--sort rate 					\
        			--fastest 50 					\
        			--latest 40 					\
        			--score 30 						\
        			--age 24						;;
        e|export)
        	exp=$DOTFILES/pacman
        	[[ ! -d $exp ]] && mkdir -p $exp
            pacman -Qqen | awk '{print $1}' > $exp/loc.txt
            pacman -Qqem | awk '{print $1}' > $exp/aur.txt
            ;;
        q|query)	shift; pacman -Qs "$@"						;;
        c|clean)	paru -Sc									;;
        d|diff)		sudo DIFFPROG='delta --color-only' pacdiff	;;
        u|upgrade)
        	script -q /dev/null -c paru | tee >([[ $(grep -E '.+\.pac(new|orig|save)') ]] && pm diff)
        	pacman -Qtdq && echo "There are orphans to remove"
        	;;
        *)
        	echo "Usage: pm [install|query|remove] <pkg1 pkg2 ...>"
        	echo "       pm [clean|diff|export|purge|upgrade]"
        	;;
    esac
}
zs() {
	case "$1" in
		e|edit)
			sha1sum $ZDOTDIR/.zshrc > /tmp/zshrc.sha1
			e $ZDOTDIR/.zshrc
			sha1sum -c /tmp/zshrc.sha1 --status
			if [[ $? -ne 0 ]] then
				read -q "choice?Reload changes? [y/N] "
				echo "\n"
				if [[ ${choice:l} = "y" ]] exec zsh
			fi
			rm /tmp/zshrc.sha1
			;;
		u|upgrade)
			dir=$(pwd)
			cd $ZDOTDIR
			find . -mindepth 1 -maxdepth 1 -type d -print -exec git -C {} pull \;
			cd $pwd
			;;
		*)
			zs edit
	esac
}

if [[ $UID -ne 0 ]] then
	# rust
	rust() {
		file=$(echo $1 | cut -d'.' -f1)
		rustc $file.rs && ./$file && rm $file
	}
	# custom functions
	ssh() {
	    in_list=false
	    for host in "op1" "omv"
	    do
            if [[ $1 = $host ]] then
                in_list=true
                break
            fi
		done
		if [[ $in_list = true ]] then
		    TERM=xterm-256color command ssh $1
		else
		    command ssh "$@"
		fi
	}
	sc() {
		case "$1" in
			r|start)	shift; sudo systemctl start "$@"	;;
			q|stop)		shift; sudo systemctl stop "$@"		;;
			i|status)	shift; sudo systemctl status "$@"	;;
			e|enable)	shift; sudo systemctl enable "$@"	;;
			d|disable)	shift; sudo systemctl disable "$@"	;;
			x|restart)	shift; sudo systemctl restart "$@"	;;
			*)			echo "Usage: sc [start|stop|status|enable|disable|restart] <service name>"
		esac
	}
	od() {
	    case "$1" in
	        i|status)	journalctl --user-unit onedrive -f ;;
	        r|start)	systemctl --user start onedrive    ;;
	        q|stop)		systemctl --user stop onedrive     ;;
	        *)			echo "Usage: od [status|start|stop]"
        esac
	}
	bk() {
		case "$1" in
			c|create)
				sudo borg create --list -C zstd	/run/media/spike/ssd/borg::spike-{now:%Y%m%d}	\
				/home/spike
				bg prune
				;;
			p|prune)
				sudo borg prune -v --list				\
								   --keep-within=4d		\
								   --keep-daily=3		\
								   --keep-weekly=3		\
								   --keep-monthly=2 	\
								   /run/media/spike/ssd/borg
				;;
			*)	echo "Usage: bk [create|prune]"
		esac
	}
fi
