#
# .zshrc by chluna
#
# from local user, ln -s $ZDOTDIR /root/.config/zsh/
#

# zsh functions
autoload -Uz compinit; compinit
#autoload -Uz promptinit; promptinit

# zsh history
setopt SHARE_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_SAVE_NO_DUPS

# completion for kitty
command -v kitty &> /dev/null && kitty + complete setup zsh | source /dev/stdin

# Powerlevel10k theme
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
#if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
#fi
# load theme
[[ -f $ZDOTDIR/powerlevel10k/powerlevel10k.zsh-theme ]] && source $ZDOTDIR/powerlevel10k/powerlevel10k.zsh-theme
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f $ZDOTDIR/.p10k.zsh ]] && source $ZDOTDIR/.p10k.zsh

# git completions
fpath=(/usr/share/git/completions $fpath)

# zsh autosuggestions
[[ -f $ZDOTDIR/zsh-autosuggestions/zsh-autosuggestions.zsh ]] && source $ZDOTDIR/zsh-autosuggestions/zsh-autosuggestions.zsh
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#888888"

# zsh syntax highlighting
[[ -f $ZDOTDIR/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]] && source $ZDOTDIR/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# set tty theme (dracula)
if [ "$TERM" = "linux" ]; then
    printf %b '\e[40m' '\e[8]' # set default background to color 0 'dracula-bg'
    printf %b '\e[37m' '\e[8]' # set default foreground to color 7 'dracula-fg'
    printf %b '\e]P0282a36'    # redefine 'black'          as 'dracula-bg'
    printf %b '\e]P86272a4'    # redefine 'bright-black'   as 'dracula-comment'
    printf %b '\e]P1ff5555'    # redefine 'red'            as 'dracula-red'
    printf %b '\e]P9ff7777'    # redefine 'bright-red'     as '#ff7777'
    printf %b '\e]P250fa7b'    # redefine 'green'          as 'dracula-green'
    printf %b '\e]PA70fa9b'    # redefine 'bright-green'   as '#70fa9b'
    printf %b '\e]P3f1fa8c'    # redefine 'brown'          as 'dracula-yellow'
    printf %b '\e]PBffb86c'    # redefine 'bright-brown'   as 'dracula-orange'
    printf %b '\e]P4bd93f9'    # redefine 'blue'           as 'dracula-purple'
    printf %b '\e]PCcfa9ff'    # redefine 'bright-blue'    as '#cfa9ff'
    printf %b '\e]P5ff79c6'    # redefine 'magenta'        as 'dracula-pink'
    printf %b '\e]PDff88e8'    # redefine 'bright-magenta' as '#ff88e8'
    printf %b '\e]P68be9fd'    # redefine 'cyan'           as 'dracula-cyan'
    printf %b '\e]PE97e2ff'    # redefine 'bright-cyan'    as '#97e2ff'
    printf %b '\e]P7f8f8f2'    # redefine 'white'          as 'dracula-fg'
    printf %b '\e]PFffffff'    # redefine 'bright-white'   as '#ffffff'
fi

# change cursor when switching vi command and insert modes
# https://stackoverflow.com/questions/61776558/zsh-in-vi-mode-how-to-change-color-scheme
function zle-keymap-select() {
    if [[ $KEYMAP = vicmd ]]; then
        print -n '\e[2 q'
    else
        print -n '\e[5 q'
    fi
}
zle -N zle-keymap-select

# skim key bindings
[[ -f /usr/share/skim/key-bindings.zsh ]] && source /usr/share/skim/key-bindings.zsh
[[ -f /usr/share/skim/completion.zsh ]] && source /usr/share/skim/completion.zsh

# key bindings
# ctrl + arrow to move by words
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
# make home & end work as it should
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line

# alias
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'
alias free='free -m'                # show sizes in MB
alias cp='cp -i --reflink=always'   # confirm before overwriting something
alias df='df -h'                    # human-readable sizes
# custom alias
alias se='sudoedit'
alias cl='clear'
alias jc='journalctl -rb'
command -v nnn &> /dev/null && alias fm='nnn'
command -v kitty &> /dev/null && alias kt='kitty +kitten themes'
command -v fastfetch &> /dev/null && alias ff='fastfetch'
command -v btop &> /dev/null && alias t='btop'
command -v nvtop &> /dev/null && alias gt='nvtop'
command -v powertop &> /dev/null && alias pt='sudo powertop'
command -v chezmoi &> /dev/null && alias cz='chezmoi'
command -v codium &> /dev/null && alias c='codium'
if command -v nvim &> /dev/null; then
    alias e='nvim'
    alias vi='nvim'
    alias vim='nvim'
    alias vimdiff='nvim -d'
    alias xxd='nvim -b'
    # initialize shell in emacs mode
    set -o emacs
fi
# rust alternatives
command -v helix &> /dev/null && alias e='helix'
if command -v lsd &> /dev/null; then
    alias ls='lsd -AF --group-dirs first'
    alias ll='lsd -aFl --group-dirs first'
fi
command -v fd &> /dev/null && alias find='fd'
if command -v rg &> /dev/null; then
    alias grep='rg'
    alias egrep='rg'
    alias fgrep='rg'
else
    alias grep='grep --color=auto'
    alias egrep='egrep --color=auto'
    alias fgrep='fgrep --color=auto'
fi

# global custom functions
# pacman/paru
pm() {
    if command -v paru &> /dev/null; then
        pkg=paru
        sudo_pkg=paru
    else
        pkg=pacman
        sudo_pkg='sudo pacman'
    fi
    case "$1" in
        i|install)  $pkg -Slq | sk --multi --preview "$pkg -Si {}" | xargs -ro $sudo_pkg -S;;
        r|remove)   $pkg -Qq | sk --multi --preview "$pkg -Qi {}" | xargs -ro $sudo_pkg -Rsn;;
        q|query)    $pkg -Slq | sk --preview "$pkg -Si {}";;
        p|purge)
            orphans=$($pkg -Qtdq)
            [[ $? -eq 0 ]] && echo $orphans | $sudo_pkg -Rsn -;;
        m|mirror)   sudo systemctl start reflector;;
        e|export)
            exp=$(cz source-path)/pacman
            [[ ! -d $exp ]] && mkdir -p $exp
            $pkg -Qqen > $exp/arch_packages.txt
            $pkg -Qqem > $exp/aur_packages.txt
            echo "Exported in $exp";;
        c|clean)    $sudo_pkg -Sc;;
        d|diff)     DIFFPROG=delta sudo -E pacdiff;;
        u|update)   checkupdates;;
        up|upgrade)
            log=$(mktemp)
            $sudo_pkg -Sy
            pm u | grep -q 'archlinux-keyring' && $sudo_pkg -S --needed --noconfirm archlinux-keyring
            script -q $log -c "$sudo_pkg -Su"
            grep -q '.+\.pac(new|orig|save)' $log && pm diff
            rm $log
            pm p
            xfce4-panel --plugin-event=genmon-7:refresh:bool:true;;
        *)
            echo "Usage: pm [command]"
            echo "Commands: i|install       install packages using skim"
            echo "          r|remove        remove packages using skim"
            echo "          q|query         query local package using skim"
            echo "          p|purge         remove orphaned packages"
            echo "          m|mirror        update mirrorlist"
            echo "          e|export        export local and AUR package lists"
            echo "          c|clean         clean paru cache"
            echo "          d|diff          find and act on pac[diff|new|save] files"
            echo "          u|update        check for package updates"
            echo "          up|upgrade      update and upgrade packages"
    esac
}
# zshrc edit and reload
z() {
    case "$1" in
        e|env)
            e ~/.zshenv
            source ~/.zshenv;;
        r|rc)
            chksum=$(mktemp)
            sha1sum $ZDOTDIR/.zshrc > $chksum
            e $ZDOTDIR/.zshrc
            sha1sum -c $chksum --status
            if [[ $? -ne 0 ]] then
                read -q "choice?Reload changes? [y/n] "
                echo "\n"
                if [[ ${choice:l} = "y" ]] exec zsh
            fi
            rm $chksum;;
        u|up)
            dir=$(pwd)
            cd $ZDOTDIR
            if command -v fd &> /dev/null; then
                fd . --min-depth 1 --max-depth 1 --type d --print0 --exec git -C {} pull
            else 
                find . -mindepth 1 -maxdepth 1 -type d -print -exec git -C {} pull \;
            fi
            cd $pwd;;
        *)
            exec zsh
    esac
}
# zsh emacs and vi mode
zm() {
    case "$1" in
        e|emacs)    set -o emacs;;
        v|vi)       set -o vi;;
        *)          echo "mod [v|vi]"
                    echo "mod [e|emacs]"
    esac
}

# user custom functions
if [[ $UID -ne 0 ]] then
    # custom aliases
    alias dot='cd $DOTFILES'
    alias fuck='sudo $(fc -ln -1)'
    alias run='hledger -f $HOME/data/health/running/running.journal'
    alias sudo='sudo '
    # compile and test code
    test() {
        code=$1
        file=(${(s/./)code})
        case "$file[2]" in
            c)  gcc $code -o $file[1];;
            rs) rustc $code;;
            *)  echo "Invalid file extension"
        esac
        ./$file[1]
        rm $file[1]
    }
    # hledger
    fin() {
        case "$1" in
            e|j|edit|journal)
                e $HOME/data/finance/ledger/$2.journal;;
            p|price)
                e $HOME/data/finance/ledger/$2.prices;;
            m|main)
                e $HOME/data/finance/ledger/main.journal;;
            *)
                hledger -f $HOME/data/finance/ledger/main.journal "$@"
        esac
    }
    # systemctl
    sc() {
        sc=""
        jc=""
        if [[ $1 == "-u" || $1 == "--user" ]] then
            sc="--user"
            jc="--user-unit"
            shift
        fi
        case "$1" in
            j|journal)  journalctl $jc $2 -f;;
            e|edit)     sudo -E systemctl edit $2;;
            h|help)	    echo "Usage: sc <-u|--user> <j|e|h> [command] [service]";;
            *)          systemctl $sc $1 $2
        esac
    }
    # btrbk
    bk() {
        config=/etc/btrbk/btrbk-backup.conf
        case "$1" in
            -d|--dryrun)   sudo btrbk dryrun -c $config -v;;
            -l|--list)     sudo btrbk list backups -c $config -v;;
            -s|--snapshot) sudo btrbk snapshot -v;;
            -r|--run)      sudo btrbk run -c $config -v;;
            *)
                echo "Usage: bk [command]"
                echo "Commands: -d|--dryrun    perform a dryrun"
                echo "          -l|--list      list backups"
                echo "          -s|--snapshot  snapshot only"
                echo "          -r|--run       snapshot and backup"
        esac
    }
    # btrfs progs
    bt() {
        case "$2" in
            loc)  tgt="/";;
            ext)  tgt="/run/media/spike/ssd";;
            *)
        esac
        case "$1" in
            -f|--filesystem)   sudo btrfs fi us $tgt;;
            -b|--balance)   sudo btrfs ba start -v $3 $4 $tgt;;
            -s|--scrub)   sudo btrfs sc start -Bd $tgt;;
            *)
        esac
    }
fi

# interactive shell start
#if [[ -o interactive ]]; then
#fi
